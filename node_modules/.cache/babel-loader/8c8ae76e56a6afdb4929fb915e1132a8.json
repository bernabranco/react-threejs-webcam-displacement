{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nimport texture1 from './circle.png';\nimport Stats from './Stats.js';\nexport default function Threejs() {\n  _s();\n\n  useEffect(() => {\n    //GET PERFORMACE STATS, COMMENT TO HIDE\n    (function () {\n      var script = document.createElement('script');\n\n      script.onload = function () {\n        var stats = new Stats();\n        document.body.appendChild(stats.dom);\n        requestAnimationFrame(function loop() {\n          stats.update();\n          requestAnimationFrame(loop);\n        });\n      };\n\n      script.src = '//mrdoob.github.io/stats.js/build/stats.min.js';\n      document.head.appendChild(script);\n    })();\n\n    let renderer, scene, camera, stats;\n    let sphere, uniforms;\n    let displacement, noise;\n    init();\n    animate();\n\n    function init() {\n      camera = new THREE.PerspectiveCamera(30, window.innerWidth / window.innerHeight, 1, 10000);\n      camera.position.z = 300;\n      scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x050505);\n      uniforms = {\n        \"amplitude\": {\n          value: 1.0\n        },\n        \"color\": {\n          value: new THREE.Color(0xff2200)\n        },\n        \"colorTexture\": {\n          value: new THREE.TextureLoader().load(\"textures/water.jpg\")\n        }\n      };\n      uniforms[\"colorTexture\"].value.wrapS = uniforms[\"colorTexture\"].value.wrapT = THREE.RepeatWrapping;\n      const shaderMaterial = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: document.getElementById('vertexshader').textContent,\n        fragmentShader: document.getElementById('fragmentshader').textContent\n      });\n      const radius = 50,\n            segments = 128,\n            rings = 64;\n      const geometry = new THREE.SphereGeometry(radius, segments, rings);\n      displacement = new Float32Array(geometry.attributes.position.count);\n      noise = new Float32Array(geometry.attributes.position.count);\n\n      for (let i = 0; i < displacement.length; i++) {\n        noise[i] = Math.random() * 5;\n      }\n\n      geometry.setAttribute('displacement', new THREE.BufferAttribute(displacement, 1));\n      sphere = new THREE.Mesh(geometry, shaderMaterial);\n      scene.add(sphere);\n      renderer = new THREE.WebGLRenderer();\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      const container = document.getElementById('container');\n      container.appendChild(renderer.domElement);\n      stats = new Stats();\n      container.appendChild(stats.dom); //\n\n      window.addEventListener('resize', onWindowResize);\n    }\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      render();\n      stats.update();\n    }\n\n    function render() {\n      const time = Date.now() * 0.01;\n      sphere.rotation.y = sphere.rotation.z = 0.01 * time;\n      uniforms[\"amplitude\"].value = 2.5 * Math.sin(sphere.rotation.y * 0.125);\n      uniforms[\"color\"].value.offsetHSL(0.0005, 0, 0);\n\n      for (let i = 0; i < displacement.length; i++) {\n        displacement[i] = Math.sin(0.1 * i + time);\n        noise[i] += 0.5 * (0.5 - Math.random());\n        noise[i] = THREE.MathUtils.clamp(noise[i], -5, 5);\n        displacement[i] += noise[i];\n      }\n\n      sphere.geometry.attributes.displacement.needsUpdate = true;\n      renderer.render(scene, camera);\n    }\n  }, []);\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-buffer-geometry4/src/components/Threejs.js"],"names":["useEffect","THREE","texture1","Stats","Threejs","script","document","createElement","onload","stats","body","appendChild","dom","requestAnimationFrame","loop","update","src","head","renderer","scene","camera","sphere","uniforms","displacement","noise","init","animate","PerspectiveCamera","window","innerWidth","innerHeight","position","z","Scene","background","Color","value","TextureLoader","load","wrapS","wrapT","RepeatWrapping","shaderMaterial","ShaderMaterial","vertexShader","getElementById","textContent","fragmentShader","radius","segments","rings","geometry","SphereGeometry","Float32Array","attributes","count","i","length","Math","random","setAttribute","BufferAttribute","Mesh","add","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","container","domElement","addEventListener","onWindowResize","aspect","updateProjectionMatrix","render","time","Date","now","rotation","y","sin","offsetHSL","MathUtils","clamp","needsUpdate"],"mappings":"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","sourcesContent":["\nimport {useEffect} from 'react'\nimport * as THREE from 'three';\nimport texture1 from './circle.png'\nimport Stats from './Stats.js'\n\nexport default function Threejs(){\n\nuseEffect(() => {\n\n\t//GET PERFORMACE STATS, COMMENT TO HIDE\n\t(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)});};script.src='//mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);})()\n\n\t\n\t\n\tlet renderer, scene, camera, stats;\n\n\tlet sphere, uniforms;\n\n\tlet displacement, noise;\n\n\tinit();\n\tanimate();\n\n\tfunction init() {\n\n\t\tcamera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 10000 );\n\t\tcamera.position.z = 300;\n\n\t\tscene = new THREE.Scene();\n\t\tscene.background = new THREE.Color( 0x050505 );\n\n\t\tuniforms = {\n\n\t\t\t\"amplitude\": { value: 1.0 },\n\t\t\t\"color\": { value: new THREE.Color( 0xff2200 ) },\n\t\t\t\"colorTexture\": { value: new THREE.TextureLoader().load( \"textures/water.jpg\" ) }\n\n\t\t};\n\n\t\tuniforms[ \"colorTexture\" ].value.wrapS = uniforms[ \"colorTexture\" ].value.wrapT = THREE.RepeatWrapping;\n\n\t\tconst shaderMaterial = new THREE.ShaderMaterial( {\n\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader: document.getElementById( 'vertexshader' ).textContent,\n\t\t\tfragmentShader: document.getElementById( 'fragmentshader' ).textContent\n\n\t\t} );\n\n\n\t\tconst radius = 50, segments = 128, rings = 64;\n\n\t\tconst geometry = new THREE.SphereGeometry( radius, segments, rings );\n\n\t\tdisplacement = new Float32Array( geometry.attributes.position.count );\n\t\tnoise = new Float32Array( geometry.attributes.position.count );\n\n\t\tfor ( let i = 0; i < displacement.length; i ++ ) {\n\n\t\t\tnoise[ i ] = Math.random() * 5;\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'displacement', new THREE.BufferAttribute( displacement, 1 ) );\n\n\t\tsphere = new THREE.Mesh( geometry, shaderMaterial );\n\t\tscene.add( sphere );\n\n\t\trenderer = new THREE.WebGLRenderer();\n\t\trenderer.setPixelRatio( window.devicePixelRatio );\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t\tconst container = document.getElementById( 'container' );\n\t\tcontainer.appendChild( renderer.domElement );\n\n\t\tstats = new Stats();\n\t\tcontainer.appendChild( stats.dom );\n\n\t\t//\n\n\t\twindow.addEventListener( 'resize', onWindowResize );\n\n\t}\n\n\tfunction onWindowResize() {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}\n\n\tfunction animate() {\n\n\t\trequestAnimationFrame( animate );\n\n\t\trender();\n\t\tstats.update();\n\n\t}\n\n\tfunction render() {\n\n\t\tconst time = Date.now() * 0.01;\n\n\t\tsphere.rotation.y = sphere.rotation.z = 0.01 * time;\n\n\t\tuniforms[ \"amplitude\" ].value = 2.5 * Math.sin( sphere.rotation.y * 0.125 );\n\t\tuniforms[ \"color\" ].value.offsetHSL( 0.0005, 0, 0 );\n\n\t\tfor ( let i = 0; i < displacement.length; i ++ ) {\n\n\t\t\tdisplacement[ i ] = Math.sin( 0.1 * i + time );\n\n\t\t\tnoise[ i ] += 0.5 * ( 0.5 - Math.random() );\n\t\t\tnoise[ i ] = THREE.MathUtils.clamp( noise[ i ], - 5, 5 );\n\n\t\t\tdisplacement[ i ] += noise[ i ];\n\n\t\t}\n\n\t\tsphere.geometry.attributes.displacement.needsUpdate = true;\n\n\t\trenderer.render( scene, camera );\n\n\t}\n\t\t\n      },[]);\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}