{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nimport texture1 from './circle.png';\nimport Stats from './Stats.js';\nexport default function Threejs() {\n  _s();\n\n  useEffect(() => {\n    //GET PERFORMACE STATS, COMMENT TO HIDE\n    (function () {\n      var script = document.createElement('script');\n\n      script.onload = function () {\n        var stats = new Stats();\n        document.body.appendChild(stats.dom);\n        requestAnimationFrame(function loop() {\n          stats.update();\n          requestAnimationFrame(loop);\n        });\n      };\n\n      script.src = '//mrdoob.github.io/stats.js/build/stats.min.js';\n      document.head.appendChild(script);\n    })(); // Global Variables\n\n\n    let sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    let mouseX = 0;\n    let mouseY = 0;\n    const particleCount = 50000;\n    let pointSize = 10; // CREATE SCENE\n\n    const scene = new THREE.Scene();\n    const geometry = new THREE.PlaneGeometry(1, 1);\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_time: {\n          value: 1.0\n        },\n        u_resolution: {\n          value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n        },\n        u_mousex: {\n          value: 0\n        },\n        u_mousey: {\n          value: 0\n        }\n      },\n      vertexShader: document.getElementById('vertexShader').textContent,\n      fragmentShader: document.getElementById('fragmentShader').textContent\n    });\n    const plane = new THREE.Mesh(geometry, material);\n    scene.add(plane); // CAMERA\n\n    const fieldOfView = 75;\n    const aspectRatio = sizes.width / sizes.height;\n    const nearPlane = 1;\n    const farPlane = 3;\n    const camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n    camera.position.x = 0;\n    camera.position.y = 0;\n    camera.position.z = farPlane / 3;\n    scene.add(camera); // FRONT-END PART\n\n    let container = document.getElementById('webgl-canvas');\n    container.style.width = '100%';\n    container.style.height = '100vh';\n    container.style.overflow = 'hidden'; // RENDERER\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(sizes.width, sizes.height);\n    container.appendChild(renderer.domElement);\n\n    function render() {\n      renderer.render(scene, camera);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      render();\n    }\n\n    animate(); // EVENT LISTENERS\n\n    window.addEventListener('resize', onWindowResize, false);\n    let windowHalfX = sizes.width / 2;\n    let windowHalfY = sizes.height / 2;\n\n    function onWindowResize() {\n      windowHalfX = window.innerWidth / 2;\n      windowHalfY = window.innerHeight / 2;\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }, []);\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-buffer-geometry5/src/components/Threejs.js"],"names":["useEffect","THREE","texture1","Stats","Threejs","script","document","createElement","onload","stats","body","appendChild","dom","requestAnimationFrame","loop","update","src","head","sizes","width","window","innerWidth","height","innerHeight","mouseX","mouseY","particleCount","pointSize","scene","Scene","geometry","PlaneGeometry","material","ShaderMaterial","uniforms","u_time","value","u_resolution","Vector2","u_mousex","u_mousey","vertexShader","getElementById","textContent","fragmentShader","plane","Mesh","add","fieldOfView","aspectRatio","nearPlane","farPlane","camera","PerspectiveCamera","position","x","y","z","container","style","overflow","renderer","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","domElement","render","animate","addEventListener","onWindowResize","windowHalfX","windowHalfY","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["\nimport {useEffect} from 'react'\nimport * as THREE from 'three';\nimport texture1 from './circle.png'\nimport Stats from './Stats.js'\n\nexport default function Threejs(){\n\nuseEffect(() => {\n\n\t//GET PERFORMACE STATS, COMMENT TO HIDE\n\t(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)});};script.src='//mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);})()\n\n\t\n\t\t// Global Variables\n\t\tlet sizes = {\n\t\t\twidth: window.innerWidth,\n\t\t\theight: window.innerHeight\n\t\t}\n\n\t\tlet mouseX = 0;\n\t\tlet mouseY = 0;\n\n\t\tconst particleCount = 50000;\n\t\tlet pointSize = 10;\n\t\t\n\t\t  \n\t\t// CREATE SCENE\n\t\tconst scene = new THREE.Scene();\n\n\t\tconst geometry = new THREE.PlaneGeometry( 1, 1 );\n\t\tconst material = new THREE.ShaderMaterial({\n\t\t\tuniforms: {\n\t\t\t\tu_time: { value: 1.0 },\n\t\t\t\tu_resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n\t\t\t\tu_mousex: {value: 0},\n\t\t\t\tu_mousey: {value:0}\n\t\t\t},\n\t\t\tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n\t\t\tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n\t\t});\n\t\tconst plane = new THREE.Mesh( geometry, material );\n\t\tscene.add( plane );\n\n\n\n\t\t// CAMERA\n        const fieldOfView = 75;\n        const aspectRatio = sizes.width / sizes.height;\n        const nearPlane = 1;\n\t\tconst farPlane = 3;\n\n\t\tconst camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);\n\t\tcamera.position.x = 0;\n\t\tcamera.position.y = 0;\n\t\tcamera.position.z = farPlane/3;\n\t\tscene.add(camera)\n\n\t\t// FRONT-END PART\n\t\tlet container = document.getElementById('webgl-canvas');\n\t\tcontainer.style.width = '100%';\n\t\tcontainer.style.height = '100vh';\n\t\tcontainer.style.overflow = 'hidden';\n\n\t\t// RENDERER\n\t\tconst renderer = new THREE.WebGLRenderer(); \n\t\trenderer.setPixelRatio(window.devicePixelRatio); \t\n\t\trenderer.setSize(sizes.width, sizes.height); \n\t\tcontainer.appendChild(renderer.domElement); \n\n\t\tfunction render() {\n\t\t\trenderer.render(scene, camera);\n\t\t}\n\n\t\tfunction animate() {\n\t\t\trequestAnimationFrame(animate);\n\t\t\trender();\n\t\t}\n\t\tanimate();\n\n\t\t// EVENT LISTENERS\n\t\twindow.addEventListener('resize', onWindowResize, false);\n\t\n\t\tlet windowHalfX = sizes.width / 2;\n\t\tlet windowHalfY = sizes.height / 2;\n\t\n\t\tfunction onWindowResize() {\n\t\t\twindowHalfX = window.innerWidth / 2;\n\t\t\twindowHalfY = window.innerHeight / 2;\n\t\n\t\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\t\tcamera.updateProjectionMatrix();\n\t\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\t}\n\t\t\n      },[]);\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}