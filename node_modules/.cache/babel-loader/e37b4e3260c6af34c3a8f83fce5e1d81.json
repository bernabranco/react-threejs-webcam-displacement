{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nimport Stats from './Stats.js';\nexport default function Threejs() {\n  _s();\n\n  useEffect(() => {\n    //GET PERFORMACE STATS, COMMENT TO HIDE\n    //(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)});};script.src='//mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);})()\n    // Global Variables\n    let sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }; // CREATE SCENE\n\n    const scene = new THREE.Scene();\n    const geometry = new THREE.PlaneGeometry(2, 2, 1);\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_time: {\n          value: 1.0\n        },\n        u_resolution: {\n          value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n        },\n        u_mouse: {\n          value: new THREE.Vector2(0, 0)\n        }\n      },\n      vertexShader: document.getElementById('vertexShader').textContent,\n      fragmentShader: document.getElementById('fragmentShader').textContent\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh); // CAMERA\n\n    const camera = new THREE.PerspectiveCamera();\n    scene.add(camera); // FRONT-END PART\n\n    let container = document.getElementById('webgl-canvas'); // RENDERER\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(sizes.width, sizes.height);\n    container.appendChild(renderer.domElement);\n\n    function render() {\n      renderer.render(scene, camera); //define shader time\n\n      material.uniforms.u_time.value += 0.04;\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      render();\n    }\n\n    animate(); // EVENT LISTENERS\n\n    window.addEventListener('resize', onWindowResize, false);\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  }, []);\n  return null;\n}\n\n_s(Threejs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Threejs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Threejs\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-plane-geometry/src/components/Threejs.js"],"names":["useEffect","THREE","Stats","Threejs","sizes","width","window","innerWidth","height","innerHeight","scene","Scene","geometry","PlaneGeometry","material","ShaderMaterial","uniforms","u_time","value","u_resolution","Vector2","u_mouse","vertexShader","document","getElementById","textContent","fragmentShader","mesh","Mesh","add","camera","PerspectiveCamera","container","renderer","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","render","animate","requestAnimationFrame","addEventListener","onWindowResize","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["\nimport {useEffect} from 'react'\nimport * as THREE from 'three';\nimport Stats from './Stats.js'\n\nexport default function Threejs(){\n\nuseEffect(() => {\n\n\t//GET PERFORMACE STATS, COMMENT TO HIDE\n\t//(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)});};script.src='//mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);})()\n\n\t// Global Variables\n\tlet sizes = {\n\t\twidth: window.innerWidth,\n\t\theight: window.innerHeight\n\t}\n\n\t// CREATE SCENE\n\tconst scene = new THREE.Scene();\n    \n\tconst geometry = new THREE.PlaneGeometry( 2, 2, 1);\n\tconst material = new THREE.ShaderMaterial({\n\t\tuniforms: {\n\t\t\tu_time: { value: 1.0 },\n\t\t\tu_resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n\t\t\tu_mouse: {value: new THREE.Vector2(0, 0)},\n\t\t},\n\t\tvertexShader: document.getElementById( 'vertexShader' ).textContent,\n\t\tfragmentShader: document.getElementById( 'fragmentShader' ).textContent\n\t});\n\n\tconst mesh = new THREE.Mesh( geometry, material );\n\tscene.add(mesh);\n\n\t// CAMERA\n\tconst camera = new THREE.PerspectiveCamera();\n\tscene.add(camera)\n\n\t// FRONT-END PART\n\tlet container = document.getElementById('webgl-canvas');\n\n\t// RENDERER\n\tconst renderer = new THREE.WebGLRenderer(); \n\trenderer.setPixelRatio(window.devicePixelRatio); \t\n\trenderer.setSize(sizes.width, sizes.height); \n\tcontainer.appendChild(renderer.domElement); \n\n\tfunction render() {\n\t\trenderer.render(scene, camera);\n\t\t//define shader time\n\t\tmaterial.uniforms.u_time.value += 0.04;\n\t}\n\n\tfunction animate() {\n\t\trequestAnimationFrame(animate);\n\t\trender();\n\t}\n\tanimate();\n\n\t// EVENT LISTENERS\n\twindow.addEventListener('resize', onWindowResize, false);\n\n\tfunction onWindowResize() {\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t}\n\t\n\t},[]);\n\nreturn(\n   null\n)\n\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}