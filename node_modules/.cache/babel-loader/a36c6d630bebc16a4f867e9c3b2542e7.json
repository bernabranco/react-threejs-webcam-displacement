{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { PlaneGeometry } from 'three';\nimport Stats from './Stats.js';\nexport default function Shader1() {\n  _s();\n\n  const vertexShader = `\nprecision mediump float;\nvarying vec2 vUv;\n\nvoid main(){\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n`;\n  const fragmentShader = `\n\tprecision mediump float;\n\tuniform float u_time;\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform sampler2D u_texture;\n\tvarying vec2 vUv;\n\n\tfloat random (in vec2 st) {\n\t\treturn fract(sin(dot(st.xy,\n\t\t\t\t\t\t\t vec2(12.9898,78.233)))\n\t\t\t\t\t* 43758.5453123);\n\t}\n\t\n\t// Value noise by Inigo Quilez - iq/2013\n\t// https://www.shadertoy.com/view/lsf3WH\n\tfloat noise(vec2 st) {\n\t\tvec2 i = floor(st);\n\t\tvec2 f = fract(st);\n\t\tvec2 u = f*f*(3.0-2.0*f);\n\t\treturn mix( mix( random( i + vec2(0.0,0.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\tmix( random( i + vec2(0.0,1.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,1.0) ), u.x), u.y);\n\t}\n\n\tvec2 displace( vec2 uv, in float offset )\n\t{\n    st.x += 0.1*sin( u_time + 2.0*st.y ) ;\n    st.y += 0.1*sin( u_time + 2.0*st.x ) ;\n    \n    float a = noise(st*1.5+sin(0.1*u_time))*6.2831;\n    a += offset;\n    return vec2( cos(a), sin(a) );\n\t}\n\n\tvoid main() {\n\t\n\t//vertex coordinates from vertex shader\n\tvec2 uv = vUv;\n\n\tfloat offset = u_time + (gl_FragCoord.x/u_resolution.y);\n    vec2 displace = displace(uv*10., offset*3.0 );\n    uv += 0.015*displace;\n\n    //import texture and give it displacement effect\n\tvec4 texture = texture2D(u_texture, uv);\n\n\t//output result\n\tgl_FragColor = vec4(texture);\n}\n`;\n  useEffect(() => {\n    //GET PERFORMACE STATS, COMMENT TO HIDE\n    (function () {\n      var script = document.createElement('script');\n\n      script.onload = function () {\n        var stats = new Stats();\n        document.body.appendChild(stats.dom);\n        requestAnimationFrame(function loop() {\n          stats.update();\n          requestAnimationFrame(loop);\n        });\n      };\n\n      script.src = '//mrdoob.github.io/stats.js/build/stats.min.js';\n      document.head.appendChild(script);\n    })(); // (FRONT-END) CHOOSE SHADER CONTAINER \n\n\n    let container = document.getElementById('webgl-canvas');\n    const video = document.getElementById('video'); //DEFINE SIZE\n\n    let sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }; //MOUSE POSITIONS\n\n    let mouseX;\n    let mouseY; //CREATE SHADER CANVAS AND APPEND TO CHOSEN CONTAINER\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(sizes.width, sizes.height);\n    container.appendChild(renderer.domElement); // CREATE SCENE\n\n    const scene = new THREE.Scene(); // CREATE GEOMETRY\n\n    const geometry = new PlaneGeometry(2, 2, 1); // CREATE CUSTOM MATERIAL\n\n    var texture = new THREE.VideoTexture(video);\n    const material = new THREE.ShaderMaterial({\n      uniforms: {\n        u_time: {\n          value: 1.0\n        },\n        u_resolution: {\n          value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n        },\n        u_mouse: {\n          value: new THREE.Vector2(0, 0)\n        },\n        u_texture: {\n          type: 't',\n          value: texture\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    }); // CREATE MESH\n\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh); // CREATE CAMERA\n\n    const camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 1, 1000);\n    scene.add(camera); // FOR VALUES THAT UPDATE EACH FRAME\n\n    function render() {\n      renderer.render(scene, camera); //SHADER UNIFORMS\n\n      material.uniforms.u_time.value += 0.04;\n      material.uniforms.u_mouse.value = new THREE.Vector2(mouseX, mouseY);\n    }\n\n    function animate() {\n      requestAnimationFrame(animate);\n      render();\n    }\n\n    animate(); // EVENT LISTENERS\n\n    window.addEventListener('resize', onWindowResize, false);\n    window.addEventListener('mousemove', mousePosition, false); // GET MOUSE POSITIONS\n\n    function mousePosition(e) {\n      mouseX = e.pageX;\n      mouseY = e.pageY;\n    } // WINDOW RESIZE\n\n\n    function onWindowResize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n  });\n  return null;\n}\n\n_s(Shader1, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Shader1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Shader1\");","map":{"version":3,"sources":["/Users/bernardoagbranco/react-threejs/react-threejs-webcam/src/components/Shader1.js"],"names":["useEffect","THREE","PlaneGeometry","Stats","Shader1","vertexShader","fragmentShader","script","document","createElement","onload","stats","body","appendChild","dom","requestAnimationFrame","loop","update","src","head","container","getElementById","video","sizes","width","window","innerWidth","height","innerHeight","mouseX","mouseY","renderer","WebGLRenderer","setPixelRatio","devicePixelRatio","setSize","domElement","scene","Scene","geometry","texture","VideoTexture","material","ShaderMaterial","uniforms","u_time","value","u_resolution","Vector2","u_mouse","u_texture","type","mesh","Mesh","add","camera","PerspectiveCamera","render","animate","addEventListener","onWindowResize","mousePosition","e","pageX","pageY","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["\nimport {useEffect} from 'react'\nimport * as THREE from 'three';\nimport { PlaneGeometry } from 'three';\nimport Stats from './Stats.js'\n\nexport default function Shader1(){\n\nconst vertexShader = `\nprecision mediump float;\nvarying vec2 vUv;\n\nvoid main(){\n  vUv = uv;\n  gl_Position = vec4(position, 1.0);\n}\n`\n\nconst fragmentShader = `\n\tprecision mediump float;\n\tuniform float u_time;\n\tuniform vec2 u_resolution;\n\tuniform vec2 u_mouse;\n\tuniform sampler2D u_texture;\n\tvarying vec2 vUv;\n\n\tfloat random (in vec2 st) {\n\t\treturn fract(sin(dot(st.xy,\n\t\t\t\t\t\t\t vec2(12.9898,78.233)))\n\t\t\t\t\t* 43758.5453123);\n\t}\n\t\n\t// Value noise by Inigo Quilez - iq/2013\n\t// https://www.shadertoy.com/view/lsf3WH\n\tfloat noise(vec2 st) {\n\t\tvec2 i = floor(st);\n\t\tvec2 f = fract(st);\n\t\tvec2 u = f*f*(3.0-2.0*f);\n\t\treturn mix( mix( random( i + vec2(0.0,0.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,0.0) ), u.x),\n\t\t\t\t\tmix( random( i + vec2(0.0,1.0) ),\n\t\t\t\t\t\t random( i + vec2(1.0,1.0) ), u.x), u.y);\n\t}\n\n\tvec2 displace( vec2 uv, in float offset )\n\t{\n    st.x += 0.1*sin( u_time + 2.0*st.y ) ;\n    st.y += 0.1*sin( u_time + 2.0*st.x ) ;\n    \n    float a = noise(st*1.5+sin(0.1*u_time))*6.2831;\n    a += offset;\n    return vec2( cos(a), sin(a) );\n\t}\n\n\tvoid main() {\n\t\n\t//vertex coordinates from vertex shader\n\tvec2 uv = vUv;\n\n\tfloat offset = u_time + (gl_FragCoord.x/u_resolution.y);\n    vec2 displace = displace(uv*10., offset*3.0 );\n    uv += 0.015*displace;\n\n    //import texture and give it displacement effect\n\tvec4 texture = texture2D(u_texture, uv);\n\n\t//output result\n\tgl_FragColor = vec4(texture);\n}\n`\n\nuseEffect(() => {\n\n\t//GET PERFORMACE STATS, COMMENT TO HIDE\n\t(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)});};script.src='//mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);})()\n\n\t// (FRONT-END) CHOOSE SHADER CONTAINER \n\tlet container = document.getElementById('webgl-canvas');\n\tconst video = document.getElementById( 'video' );\n\n\t//DEFINE SIZE\n\tlet sizes = {\n\t\twidth: window.innerWidth,\n\t\theight: window.innerHeight\n\t}\n\n\t//MOUSE POSITIONS\n\tlet mouseX;\n\tlet mouseY;\n\n    //CREATE SHADER CANVAS AND APPEND TO CHOSEN CONTAINER\n\tconst renderer = new THREE.WebGLRenderer(); \n\trenderer.setPixelRatio(window.devicePixelRatio); \t\n\trenderer.setSize(sizes.width, sizes.height); \n\tcontainer.appendChild(renderer.domElement); \n\n\t// CREATE SCENE\n\tconst scene = new THREE.Scene();\n\t\n\t// CREATE GEOMETRY\n\tconst geometry = new PlaneGeometry( 2, 2, 1);\n\n\t// CREATE CUSTOM MATERIAL\n\tvar texture = new THREE.VideoTexture(video);\n\tconst material = new THREE.ShaderMaterial({\n\t\tuniforms: {\n\t\t\tu_time: {value: 1.0 },\n\t\t\tu_resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },\n\t\t\tu_mouse: {value: new THREE.Vector2(0, 0)},\n\t\t\tu_texture: {type:'t', value:texture}\n\t\t},\n\t\tvertexShader: vertexShader,\n\t\tfragmentShader: fragmentShader\n\t});\n\t\n\t// CREATE MESH\n\tconst mesh = new THREE.Mesh( geometry, material );\n\tscene.add(mesh);\n\n\t// CREATE CAMERA\n\tconst camera = new THREE.PerspectiveCamera(45, sizes.width / sizes.height, 1, 1000 );\n\tscene.add(camera)\n\n\t// FOR VALUES THAT UPDATE EACH FRAME\n\tfunction render() {\n\t\trenderer.render(scene, camera);\n\t\t//SHADER UNIFORMS\n\t\tmaterial.uniforms.u_time.value += 0.04;\n\t\tmaterial.uniforms.u_mouse.value = new THREE.Vector2(mouseX,mouseY);\n\t}\n\n\tfunction animate() {\n\t\trequestAnimationFrame(animate);\n\t\trender();\n\t}\n\tanimate();\n\n\t// EVENT LISTENERS\n\twindow.addEventListener('resize', onWindowResize, false);\n\twindow.addEventListener('mousemove', mousePosition, false);\n\n\t// GET MOUSE POSITIONS\n\tfunction mousePosition(e){\n\t\tmouseX = e.pageX;\n\t\tmouseY = e.pageY;\n\t}\n\n\t// WINDOW RESIZE\n\tfunction onWindowResize() {\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t}\n\t});\n\nreturn(\n   null\n)\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}